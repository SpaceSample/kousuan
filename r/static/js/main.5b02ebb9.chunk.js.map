{"version":3,"sources":["question.js","App.js","serviceWorker.js","index.js"],"names":["genRandom","Math","floor","random","genQuestionData","n1","n2","fuhao","res","cal","Question","data","useState","answer","setAnswer","str","type","value","onChange","e","val","target","right","parseInt","STATUS","INIT","PLAYING","END","App","startTime","setStartTime","endTime","setEndTime","score","setScore","status","setStatus","i","push","genAllQuestionData","questions","className","onClick","Date","getTime","map","qd","index","key","forEach","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAEA,SAASA,IACP,OAAOC,KAAKC,MAAoB,GAAdD,KAAKE,UAWzB,SAASC,IAEP,IAAMC,EAAKL,IACLM,EAAKN,IACLO,EAXCN,KAAKE,SAAS,GAYfK,EATR,SAAaH,EAAIE,EAAOD,GACtB,OAAOC,EAASF,EAAKC,EAAOD,EAAKC,EAQrBG,CAAIJ,EAAIE,EAAOD,GAC3B,OAAGE,EAAI,GAAKA,EAAI,GACPJ,IAEF,CAACC,KAAIC,KAAIC,QAAOC,OAGzB,SAASE,EAAT,GAA0B,IAAPC,EAAM,EAANA,KAAM,EACKC,mBAAS,IADd,mBAChBC,EADgB,KACRC,EADQ,KAEjBC,EAAMJ,EAAKN,IAAIM,EAAKJ,MAAM,MAAM,OAAOI,EAAKL,GAAG,MAOrD,OACE,6BAAMS,EAAI,2BAAOC,KAAK,OAAOC,MAAOJ,EAAQK,SAP7B,SAAAC,GACf,IAAMC,EAAMD,EAAEE,OAAOJ,MACrBH,EAAUM,GACVT,EAAKE,OAASO,EACdT,EAAKW,MAAQC,SAASZ,EAAKE,UAAYF,EAAKH,QC7BhD,IAAMgB,EAAS,CACbC,KAAK,EACLC,QAAQ,EACRC,IAAI,GA6DSC,MA3Df,WAAgB,IAAD,EACqBhB,mBAAS,GAD9B,mBACNiB,EADM,KACKC,EADL,OAEiBlB,mBAAS,GAF1B,mBAENmB,EAFM,KAEGC,EAFH,OAIapB,mBAAS,GAJtB,mBAINqB,EAJM,KAICC,EAJD,OAKetB,mBAASY,EAAOC,MAL/B,mBAKNU,EALM,KAKEC,EALF,OAMOxB,mBAMpB,WAEE,IADA,IAAMD,EAAO,GACJ0B,EAAE,EAAEA,EAAE,GAAGA,IAChB1B,EAAK2B,KAAKlC,KAEZ,OAAOO,EAXoB4B,IAAtBC,EANM,oBAkCb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACfN,IAAWX,EAAOC,MACjB,4BAAQiB,QA9BhB,WACEZ,GAAa,IAAIa,MAAOC,WACxBR,EAAWZ,EAAOE,WA4BZ,gBAGDS,IAAWX,EAAOE,SACjBc,EAAUK,KAAI,SAACC,EAAIC,GAAL,OAAe,kBAACrC,EAAD,CAAUC,KAAMmC,EAAIE,IAAKD,OAEvDZ,IAAWX,EAAOE,SACjB,4BAAQgB,QA1BhB,WACEV,GAAW,IAAIW,MAAOC,WACtB,IAAIX,EAAO,EACXO,EAAUS,SAAQ,SAAAH,GACZA,EAAGjC,QAGHiC,EAAGxB,OACLW,OAGJC,EAASD,GACTG,EAAUZ,EAAOG,OAcX,gBAGDQ,IAAWX,EAAOG,KACjB,6BACE,4CAAO,+BAAQI,EAAQF,GAAW,KAAlC,UACA,4CAAO,8BAAOI,QChDNiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5b02ebb9.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction genRandom() {\r\n  return Math.floor(Math.random()*20);\r\n}\r\n\r\nfunction genFuhao() {\r\n  return Math.random()>0.5;\r\n}\r\n\r\nfunction cal(n1, fuhao, n2){\r\n  return fuhao ? (n1 + n2) : (n1 - n2);\r\n}\r\n\r\nfunction genQuestionData() {\r\n  //return genRandom() + genFuhao() + genRandom();\r\n  const n1 = genRandom();\r\n  const n2 = genRandom();\r\n  const fuhao = genFuhao();\r\n  const res = cal(n1, fuhao, n2);\r\n  if(res<0 || res>20){\r\n    return genQuestionData();\r\n  }\r\n  return {n1, n2, fuhao, res};\r\n}\r\n\r\nfunction Question({data}){\r\n  const [answer, setAnswer] = useState('');\r\n  const str = data.n1+(data.fuhao?' + ':' - ')+data.n2+' = ';\r\n  const onChange = e => {\r\n    const val = e.target.value;\r\n    setAnswer(val);\r\n    data.answer = val;\r\n    data.right = parseInt(data.answer) === data.res;\r\n  }\r\n  return (\r\n    <div>{str}<input type=\"text\" value={answer} onChange={onChange}/></div>\r\n  );\r\n}\r\n\r\nexport {Question, genQuestionData};\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Question, genQuestionData} from './question';\n\nconst STATUS = {\n  INIT:1,\n  PLAYING:2,\n  END:3\n}\nfunction App() {\n  const [startTime, setStartTime] = useState(0);\n  const [endTime, setEndTime] = useState(0);\n  // const [count, setCount] = useState(0);\n  const [score, setScore] = useState(0);\n  const [status, setStatus] = useState(STATUS.INIT);\n  const [questions] = useState(genAllQuestionData());\n\n  function start() {\n    setStartTime(new Date().getTime());\n    setStatus( STATUS.PLAYING);\n  }\n  function genAllQuestionData(){\n    const data = [];\n    for (let i=0;i<20;i++){\n      data.push(genQuestionData()); \n    }\n    return data;\n  }\n  function end(){\n    setEndTime(new Date().getTime());\n    let score =0;\n    questions.forEach(qd => {\n      if(!qd.answer){\n        return;\n      }\n      if (qd.right) {\n        score ++;\n      }\n    });\n    setScore(score);\n    setStatus(STATUS.END);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {status === STATUS.INIT && (\n          <button onClick={start}>开始</button>\n        )}\n\n        {status === STATUS.PLAYING && (\n          questions.map((qd, index) => <Question data={qd} key={index} />)\n        )}\n        {status === STATUS.PLAYING && (\n          <button onClick={end}>交卷</button>\n        )}\n\n        {status === STATUS.END && (\n          <div>\n            <div>用时<span>{(endTime-startTime)/1000}</span>秒</div>\n            <div>得分<span>{score}</span></div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}